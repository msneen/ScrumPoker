@using ScrumPoker.Services;
@using ScrumPoker.ViewModels.Poker;
@model PokerVm
<script language="javascript" type="text/javascript">
    var timer;
    var getVotesAjaxUrl = '@Url.Action("GetVotes", "Poker")';
    var clearVotesAjaxUrl = '@Url.Action("ClearVotes", "Poker")';
    var clearAllAjaxUrl = '@Url.Action("ClearAll", "Poker")';
    var saveTeamMembersAjaxUrl = '@Url.Action("SaveTeamMembers", "Poker")'; 
    var saveTaskIdAjaxUrl = '@Url.Action("SetVotingTaskId", "Poker")';
    var saveMyVoteAjaxUrl = '@Url.Action("SaveMyVote", "Poker")';
    var colors = [@{//Be careful.  This section mixes Javascipt and C#
                                for (var i = 0; i < Model.Colors.Count; i++ ) 
                                { 
                                    var color = Model.Colors[i];
@:'@(color)'
                                    if(i != Model.Colors.Count-1)
                                    {
@:,
                                    }
                                }
                            }];

var teamMembers = [@{//Be careful.  This section mixes Javascipt and C#   
    if (Model.CurrentProject != null && Model.CurrentProject.TeamMembers != null)
    {
        foreach(var teamMember in Model.CurrentProject.TeamMembers ) 
        { 
@:'@(teamMember.NickName)'
                if(teamMember != Model.CurrentProject.TeamMembers.Last())
                {
@:,
                }
        }
    }
}];

    var logonUserProfile = {
        UserName: "",
        UserId: 0
    };
    var newUserEstimate = {
        Name: "",
        Estimate: ""
    }
    var PokerGame = new function () {
        this.Votes = $.extend({}, []);
        this.UserProfile = $.extend({}, logonUserProfile);
        this.UserEstimate = $.extend({}, newUserEstimate);
        this.ProjectId = 0;
        this.ProjectName = "";
        this.TaskId = "";
    }
    function SaveMyVote(callback) {
        CallServer(saveMyVoteAjaxUrl, callback); //getVotesAjaxUrl is in Votes script section
    }
    function SaveTaskId(callback) {
        CallServer(saveTaskIdAjaxUrl, callback); //getVotesAjaxUrl is in Votes script section
    }
    function SaveTeamMembers(callback) {
        CallServer(saveTeamMembersAjaxUrl, callback); //getVotesAjaxUrl is in Votes script section
    }
    function ClearAll(callback) {
        CallServer(clearAllAjaxUrl, callback); //getVotesAjaxUrl is in Votes script section
        window.location.href = '@Url.Action("Vote", "Poker")';
        location.refresh();
    }
    function ClearVotes(callback) {
        CallServer(clearVotesAjaxUrl, callback); //getVotesAjaxUrl is in Votes script section
    }
    function GetVotes(callback) {
        CallServer(getVotesAjaxUrl, callback); //getVotesAjaxUrl is in Votes script section
    }
    var isRefreshed = false;
    function CallServer(url, callback) {
        isRefreshed = false;
        ClearTimer();
        $.ajax(url, {
            type: 'POST',
            dataType: 'json',
            data: JSON.stringify(PokerGame),
            contentType: "application/json; charset=utf-8",
            success: function (pokerGame, t, x) {
                var res = [];
                PokerGame = $.extend({}, pokerGame);
                isRefreshed = true;
                callback();
                SetTimer();
            },
            error: function (pokerGame, t, x) {
                //alert(JSON.stringify(pokerGame));
            }
        });
    }
    function WriteVotes() {
        $("#tblVotes > thead").find("td").remove();
        $("#tblVotes > tbody > tr").find("td").remove();       
        $("#spnProjectName").html(PokerGame.ProjectName);
        $("#taskIdDisplay").html(PokerGame.TaskId);
        var colorCounter = 0;

        for (var i = 0; i < PokerGame.Votes.length; i++) {
            $("#tblVotes > thead").append('<td>' + PokerGame.Votes[i].Name + '</td>');

            var colorIndex = colorCounter % 8;
            $("#tblVotes > tbody > tr").append("<td style='height:40px;font-size:xx-large;text-align:center;background-color:" + colors[colorIndex] + "'>" + PokerGame.Votes[i].Estimate + "</td>");
            colorCounter += 1;
        }
    }
    function RefreshVotes() {
        PokerGame.ProjectId = $("#projectid").val();
        if ($("#firstName").val().length != 0) {
            PokerGame.UserEstimate.Name = $("#firstName").val();           
        }
        GetVotes(WriteVotes);     
    }
    function SetTimer(){
        timer = setTimeout('RefreshVotes()', 3000); 
    }
    function ClearTimer(){
        clearTimeout(timer);
    }
    $(document).ready(function () {
        $("#SubmitVote").click(function () {
            if ($("#firstName").val().length != 0) {
                $("#firstName").attr("disabled", "disabled");
                PokerGame.UserEstimate.Estimate = $("#estimate").val();
                $("#estimate").val("");
                RefreshVotes();
            }
        });
        $("#btnSaveMyVote").click(function () {
            if ($("#firstName").val().length != 0) {
                $("#firstName").attr("disabled", "disabled");
                PokerGame.UserEstimate.Name = $("#firstName").val();
                PokerGame.UserEstimate.Estimate = $("#estimate").val();
                PokerGame.TaskId = $("#taskId").val();
                $("#estimate").val("");
                SaveMyVote(WriteVotes);
            }            
        });
        $("#aClearVotes").click(function () {
            ClearVotes(WriteVotes);
        });
        $("#aClearAll").click(function () {
            ClearAll(WriteVotes);
        });
        $("#btnSaveTeamMembers").click(function () {
            SaveTeamMembers(WriteVotes);
        });
        $("#btnSetTaskId").click(function () {
            PokerGame.TaskId = $("#taskId").val();
            SaveTaskId(WriteVotes);
        });
        $("#estimate").click(function(){
            $("#fibonacci").dialog({
                width:"auto",
                height:"auto"
            });
            $("#selectable").selectable({
                selected: function(event, ui){
                    $("#estimate").val(ui.selected.innerText);
                    $("#fibonacci").dialog("close");
                }
            });
        });
        $("#firstName").autocomplete({
            source: teamMembers
        });
        RefreshVotes();
    });
</script>