@using ScrumPoker.Services;
@using ScrumPoker.ViewModels.Poker;
@model PokerVm
<script language="javascript" type="text/javascript">
    var timer;
    var getVotesAjaxUrl = '@Url.Action("GetVotes", "Poker")';
    var clearVotesAjaxUrl = '@Url.Action("ClearVotes", "Poker")';
    var clearAllAjaxUrl = '@Url.Action("ClearAll", "Poker")';
    var saveTeamMembersAjaxUrl = '@Url.Action("SaveTeamMembers", "Poker")'; 
    var saveTaskIdAjaxUrl = '@Url.Action("SetVotingTaskId", "Poker")';
    var saveMyVoteAjaxUrl = '@Url.Action("SaveMyVote", "Poker")';
    var colors = [@{//Be careful.  This section mixes Javascipt and C#
                                for (var i = 0; i < Model.Colors.Count; i++ ) 
                                { 
                                    var color = Model.Colors[i];
@:'@(color)'
                                    if(i != Model.Colors.Count-1)
                                    {
@:,
                                    }
                                }
                            }];

var teamMembers = [@{//Be careful.  This section mixes Javascipt and C#   
    if (Model.CurrentProject != null && Model.CurrentProject.TeamMembers != null)
    {
        foreach(var teamMember in Model.CurrentProject.TeamMembers ) 
        { 
@:'@(teamMember.NickName)'
                if(teamMember != Model.CurrentProject.TeamMembers.Last())
                {
@:,
                }
        }
    }
}];

    var logonUserProfile = {
        UserName: "",
        UserId: 0
    };
    var newUserEstimate = {
        Name: "",
        Estimate: ""
    }
    var PokerGame = new function () {
        this.Votes = $.extend({}, []);
        this.UserProfile = $.extend({}, logonUserProfile);
        this.UserEstimate = $.extend({}, newUserEstimate);
        this.ProjectId = 0;
        this.ProjectName = "";
        this.TaskId = "";
    }
    function SendNotification(message){
        var group = $("#projectid").val();
        $.connection.notifier.server.notify(message, group);
    }
    function SaveMyVote(callback) {
        CallServer(saveMyVoteAjaxUrl, callback);
        SendNotification('SAVEMYVOTE');
    }
    function SaveTaskId(callback) {
        CallServer(saveTaskIdAjaxUrl, callback);
        SendNotification('SAVETASKID');
    }
    function SaveTeamMembers(callback) {
        CallServer(saveTeamMembersAjaxUrl, callback);
        SendNotification('SAVETEAMMEMBERS');
    }
    function ClearAll(callback) {
        CallServer(clearAllAjaxUrl, callback);
        window.location.href = '@Url.Action("Vote", "Poker")';
        SendNotification('REFRESH');
        location.refresh();
    }
    function ClearVotes(callback) {
        CallServer(clearVotesAjaxUrl, callback); 
        SendNotification('CLEARVOTES');
    }
    function SendVote(callback) {
        CallServer(getVotesAjaxUrl, callback);
        SendNotification('SENDVOTE');
    }

    function GetVotes(callback) {
        CallServer(getVotesAjaxUrl, callback);
    }
    var isRefreshed = false;
    function CallServer(url, callback) {
        isRefreshed = false;
        $.ajax(url, {
            type: 'POST',
            dataType: 'json',
            data: JSON.stringify(PokerGame),
            contentType: "application/json; charset=utf-8",
            success: function (pokerGame, t, x) {
                var res = [];
                PokerGame = $.extend({}, pokerGame);
                isRefreshed = true;
                callback();
            }
        });
    }
    function WriteVotes() {
        $("#divVotes > ol").find("li").remove();     
        $("#spnProjectName").html(PokerGame.ProjectName);
        $("#taskIdDisplay").html(PokerGame.TaskId);
        var colorCounter = 0;
        for (var i = 0; i < PokerGame.Votes.length; i++) {
            var colorIndex = colorCounter % 8;
            $("#divVotes > ol").append("<li class='ui-state-default'><div>" + PokerGame.Votes[i].Name + "</div><div style='background-color:" + colors[colorIndex] + "'>" + PokerGame.Votes[i].Estimate +  "&nbsp;</div></li>")
            colorCounter += 1;
        }
    }
    function RefreshVotes() {
        PokerGame.ProjectId = $("#projectid").val();
        if ($("#firstName").val() != null && $("#firstName").val().length != 0) {
            PokerGame.UserEstimate.Name = $("#firstName").val();           
        }
        GetVotes(WriteVotes);     
    }
    $(document).ready(function () {
        $("#SubmitVote").click(function () {
            PokerGame.ProjectId = $("#projectid").val();
            if ($("#firstName").val().length != 0) {
                PokerGame.UserEstimate.Name = $("#firstName").val();
                $("#firstName").attr("disabled", "disabled");
                PokerGame.UserEstimate.Estimate = $("#estimate").val();
                $("#estimate").val("");
                SendVote(WriteVotes); 
            }
        });
        $("#btnSaveMyVote").click(function () {
            if ($("#firstName").val().length != 0) {
                $("#firstName").attr("disabled", "disabled");
                if($("#estimate").val().length !=0){
                    PokerGame.UserEstimate.Name = $("#firstName").val();
                    PokerGame.UserEstimate.Estimate = $("#estimate").val();
                    PokerGame.TaskId = $("#taskId").val();
                    $("#estimate").val("");
                    SaveMyVote(WriteVotes);
                }
            }            
        });
        $("#aClearVotes").click(function () {
            ClearVotes(WriteVotes);
        });
        $("#aClearAll").click(function () {
            ClearAll(WriteVotes);
        });
        $("#btnSaveTeamMembers").click(function () {
            SaveTeamMembers(WriteVotes);
        });
        $("#btnSetTaskId").click(function () {
            PokerGame.TaskId = $("#taskId").val();
            SaveTaskId(WriteVotes);
        });
        $("#estimate").click(function(){
            if($("#chkUsePopup").is(":checked")){@*//turns the popup on and off*@
                $("#fibonacci").dialog({
                    width:"auto",
                    height:"auto"
                });
                $("#selectable").selectable({
                    selected: function(event, ui){
                        $("#estimate").val(ui.selected.innerText);
                        $("#fibonacci").dialog("close");
                    }
                });
            }
        });
        $("#firstName").autocomplete({
            source: teamMembers
        });
        $(function() {            
            $.connection.hub.url = 'http://localhost:44079/signalr'
            var notifyProxy = $.connection.notifier;
            notifyProxy.client.addNotification = function(message, groupName){
                //what to do when we receive a message
                if(groupName == $("#projectid").val()){
                    RefreshVotes();
                }
            };
            $.connection.hub.start({jsonp: true})
                .done(function() {
                    //attach click events and other events to send messages here
                    if($("#projectid").val() != null && $("#projectid").val().length != 0){
                        $.connection.notifier.server.join($("#projectid").val());
                    }
                })
                .fail(function() {
                    alert('connect failed');
                });
        });
        RefreshVotes();
    });
</script>